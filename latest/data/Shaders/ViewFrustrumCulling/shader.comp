#version 460


#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_GOOGLE_include_directive : require

#include "../_includes/Constants.glsl"
#include "../_includes/ChunkPositions.glsl"
#include "../_includes/Camera.glsl"
#include "../_includes/IndirectCommand.glsl"

layout(std430, set=2, binding=0) writeonly buffer VkDrawIndexedIndirectCommandBuffer
{
		VkDrawIndirectCommand drawIndexedIndirectCommand[];
};

bool IsSphereInFrustum(vec3 pos, float radius)
{
	for (int i = 0; i < 6; ++i)
	{
		float distance = dot(pos, camera.frustumPlanes[i].xyz) + camera.frustumPlanes[i].w;
		if (distance < -radius)
			return false;
	}

	return true;
}

void main()
{
	uint idx = gl_GlobalInvocationID.x;
	float chunkOffset = CHUNK_WIDTH / 2;

	vec3 position = chunkPositions[idx].position[3].xyz;
	position += chunkOffset;

	// Check if centre of chunk is in the frustum.
	if (IsSphereInFrustum(position, SPHERICAL_CHUNK_RADIUS))
	{
		drawIndexedIndirectCommand[idx].instanceCount = 1;
	}
	else
	{
		drawIndexedIndirectCommand[idx].instanceCount = 0;
	}
}
